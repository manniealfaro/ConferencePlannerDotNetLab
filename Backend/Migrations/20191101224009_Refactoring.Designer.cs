// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191101224009_Refactoring")]
    partial class Refactoring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Backend.Data.Attendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Attendees");
                });

            modelBuilder.Entity("Backend.Data.Conference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("Backend.Data.ConferenceAttendee", b =>
                {
                    b.Property<int>("ConferenceID");

                    b.Property<int>("AttendeeID");

                    b.HasKey("ConferenceID", "AttendeeID");

                    b.HasIndex("AttendeeID");

                    b.ToTable("ConferenceAttendee");
                });

            modelBuilder.Entity("Backend.Data.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abstract")
                        .HasMaxLength(4000);

                    b.Property<int>("ConferenceID");

                    b.Property<DateTimeOffset?>("EndTime");

                    b.Property<DateTimeOffset?>("StartTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("TrackId");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("TrackId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Backend.Data.SessionAttendee", b =>
                {
                    b.Property<int>("SessionID");

                    b.Property<int>("AttendeeID");

                    b.HasKey("SessionID", "AttendeeID");

                    b.HasIndex("AttendeeID");

                    b.ToTable("SessionAttendee");
                });

            modelBuilder.Entity("Backend.Data.SessionSpeaker", b =>
                {
                    b.Property<int>("SessionId");

                    b.Property<int>("SpeakerId");

                    b.HasKey("SessionId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SessionSpeaker");
                });

            modelBuilder.Entity("Backend.Data.SessionTag", b =>
                {
                    b.Property<int>("SessionID");

                    b.Property<int>("TagID");

                    b.HasKey("SessionID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("SessionTag");
                });

            modelBuilder.Entity("Backend.Data.Speaker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("BirthDate");

                    b.Property<int?>("ConferenceID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("WebSite")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Backend.Data.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Backend.Data.Track", b =>
                {
                    b.Property<int>("TrackID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("TrackID");

                    b.HasIndex("ConferenceID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Backend.Data.ConferenceAttendee", b =>
                {
                    b.HasOne("Backend.Data.Attendee", "Attendee")
                        .WithMany("ConferenceAttendees")
                        //.HasForeignKey("AttendeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Conference", "Conference")
                        .WithMany("ConferenceAttendees")
                        //.HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Data.Session", b =>
                {
                    b.HasOne("Backend.Data.Conference", "Conference")
                        .WithMany("Sessions")
                        //.HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Track", "Track")
                        .WithMany("Sessions");
                        //.HasForeignKey("TrackId");
                });

            modelBuilder.Entity("Backend.Data.SessionAttendee", b =>
                {
                    b.HasOne("Backend.Data.Attendee", "Attendee")
                        .WithMany("SessionsAttendees")
                        //.HasForeignKey("AttendeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Session", "Session")
                        .WithMany()
                        //.HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Data.SessionSpeaker", b =>
                {
                    b.HasOne("Backend.Data.Session", "Session")
                        .WithMany("SessionSpeakers")
                        //.HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Speaker", "Speaker")
                        .WithMany("SessionSpeakers")
                        //.HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Data.SessionTag", b =>
                {
                    b.HasOne("Backend.Data.Session", "Session")
                        .WithMany("SessionTags")
                        //.HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Tag", "Tag")
                        .WithMany("SessionTags")
                        //.HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Data.Speaker", b =>
                {
                    b.HasOne("Backend.Data.Conference")
                        .WithMany("Speakers");
                        //.HasForeignKey("ConferenceID");
                });

            modelBuilder.Entity("Backend.Data.Track", b =>
                {
                    b.HasOne("Backend.Data.Conference", "Conference")
                        .WithMany("Tracks")
                        //.HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
